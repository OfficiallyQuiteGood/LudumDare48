using UnityEngine;
 
namespace ExtensionMethods
{
     public static class MathfP
     {
          /// <summary>
          /// Returns the angle of the vector in radians. Through Cos method generated by the origin and the target.
          /// </summary>
          /// <param name="origin">The point in 2D space where the vector start.</param>
          /// <param name="target">The point in 2D space where the vector ends.</param>
          /// <returns><seealso cref="float"/> angle in radians.</returns>
          public static float AngleCosRadian(Vector2 origin, Vector2 target)
          {
               Vector2 distSide = target - origin;
               float h = distSide.magnitude;
               float cos = distSide.x / h;
               float result = cos >= 0 ? cos : -cos;
               return result;
          }
     
     
          /// <summary>
          /// Returns the angle of the vector in radians. Through Sin method generated by the origin and the target.
          /// </summary>
          /// <param name="origin">The point in 2D space where the vector start.</param>
          /// <param name="target">The point in 2D space where the vector ends.</param>
          /// <returns><seealso cref="float"/> angle in radians.</returns>
          public static float AngleSinRadian(Vector2 origin, Vector2 target)
          {
               Vector2 distSide = target - origin;
               float h = distSide.magnitude;
               float sin= distSide.y / h;
               return sin;
          }
     
     
          /// <summary>
          /// Generates a projectile motion between origin and target.
          /// </summary>
          /// <param name="origin">The point in 2D space where the projectile motion start.</param>
          /// <param name="target">The point in 2D space where the projectile motion ends.</param>
          /// <returns><seealso cref="Vector2"/> with the initial momentum.</returns>
          public static Vector2 ProjectileMotion(Vector2 origin, Vector2 target)
          {
                // As I said in the previous post. You can remove t from the formulas
                float Vx(float x) => x / AngleCosRadian(origin, target);
                float Vy(float y) => y / Mathf.Abs(AngleSinRadian(origin, target)) + .5f * Mathf.Abs(Physics2D.gravity.y);
       
                float hY = target.y - origin.y;
                float dX = target.x - origin.x;
       
                Vector2 v0 = new Vector2(dX, 0).normalized;
                v0 *= Vx(Mathf.Abs(dX));
                v0.y = Vy(hY);
 
                return v0;
           }
 
           // In this method you can add t in the parameters
           /// <summary>
           /// Generates a projectile motion between origin and target.
           /// </summary>
           /// <param name="origin">The point in 2D space where the projectile motion start.</param>
           /// <param name="target">The point in 2D space where the projectile motion ends.</param>
           /// <param name="t">The time of flight of a projectile motion.</param>
           /// <returns><seealso cref="Vector2"/> with the initial momentum.</returns>
           public static Vector2 ProjectileMotion(this Vector2 origin, Vector2 target, float t)
           {
                float Vx(float x) => x / AngleCosRadian(origin, target) * t;
                float Vy(float y) => y / (Mathf.Abs(AngleSinRadian(origin, target)) * t) + .5f * Mathf.Abs(Physics2D.gravity.y) * t;
 
                float hY = target.y - origin.y;
                float dX = target.x - origin.x;
 
                Vector2 v0 = new Vector2(dX, 0).normalized;
                v0 *= Vx(Mathf.Abs(dX));
                v0.y = Vy(hY);
 
                return v0;
           }
     }
}
